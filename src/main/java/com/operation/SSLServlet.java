package com.operation;

import jakarta.servlet.ServletException;
import jakarta.servlet.annotation.WebServlet;
import jakarta.servlet.http.HttpServlet;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import jakarta.servlet.http.HttpSession;

import java.io.IOException;
import java.net.URL;
import java.security.cert.X509Certificate;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.HashMap;
import java.util.Map;

import javax.net.ssl.SSLSession;
import javax.net.ssl.SSLSocket;
import javax.net.ssl.SSLSocketFactory;

import dao.operation.RegisterProcess;

@WebServlet("/searchssl")
public class SSLServlet extends HttpServlet {
	private static final long serialVersionUID = 1L;

	
	protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
		HttpSession session = request.getSession();
		
		if (session == null || session.getAttribute("user_id") == null) {
			response.sendRedirect(request.getContextPath() + "/accounts/login.jsp");
            return;
        }
		String hostname = request.getParameter("hostname");
		if (hostname != null && !hostname.startsWith("http://") && !hostname.startsWith("https://")) {
			hostname = "https://" + hostname;
        }
		
		if (hostname == null || !isValidURL(hostname)) {
			session.setAttribute("error_ssl", "Invalid Host Name");
			response.sendRedirect(request.getContextPath()+"/display/sslsearch.jsp");
			return;
		}
		
		
		
		try {
			
			URL url = new URL(hostname);
	        int port = 443; // Default HTTPS port
	
	        // Establish SSL connection
	        SSLSocketFactory factory = (SSLSocketFactory) SSLSocketFactory.getDefault();
	        SSLSocket socket = (SSLSocket) factory.createSocket(url.getHost(), port);
	        socket.startHandshake();
	
	        // Retrieve SSL session
	        SSLSession sslsession = socket.getSession();
	        X509Certificate[] certs = (X509Certificate[]) sslsession.getPeerCertificates();
	        X509Certificate cert = (X509Certificate) certs[0];
	
	        // Serial number
	        String serialNumber = cert.getSerialNumber().toString();
	
	        // Signature algorithm
	        String signatureAlgorithm = cert.getSigAlgName();
	
	        // Issued date
	        Date issuedDate = cert.getNotBefore();
	
	        // Expiration date
	        Date expirationDate = cert.getNotAfter();
	
	        // Valid hostname
	        boolean validHostname = sslsession.isValid();
	
	        // Server type (not directly retrievable from SSL)
	        String serverType = socket.getInetAddress().getHostName();
	
	        // Remaining days to expire
	        long remainingDays = (expirationDate.getTime() - System.currentTimeMillis()) / (1000 * 60 * 60 * 24);
	
	        SimpleDateFormat dateFormat = new SimpleDateFormat("dd MMM yyyy HH:mm:ss");
	        
	        
	        Map<String, String> sslDetails = new HashMap<>();
	        sslDetails.put("Serial Number", serialNumber);
	        sslDetails.put("Signature Algorithm", signatureAlgorithm);
	        sslDetails.put("Issued Date", dateFormat.format(issuedDate));
	        sslDetails.put("Expiration Date", dateFormat.format(expirationDate));
	        sslDetails.put("Valid Hostname", (validHostname ? "Yes" : "No"));
	        sslDetails.put("Port", String.valueOf(port));
	        sslDetails.put("Server Type", serverType);
	        sslDetails.put("Remaining Days to Expire", String.valueOf(remainingDays));
	        
	        socket.close();
	        session.setAttribute("url", hostname);
	        session.setAttribute("sslDetails", sslDetails);
	        
	        RegisterProcess rgp = new RegisterProcess();
	        int id = (int)session.getAttribute("user_id");
	        rgp.saveLinkDetails(id, hostname, serialNumber, "SSL Details");
	        
	        response.sendRedirect(request.getContextPath()+"/display/sslresult.jsp");
	    } catch (Exception e) {
	    	session.setAttribute("error_ssl", "Invalid Host Name");
	    	response.sendRedirect(request.getContextPath()+"/display/sslsearch.jsp");
	        System.out.println("Error in:"+e.getMessage());
	    }
	}
	
	private boolean isValidURL(String urlString) {
        try {
            new URL(urlString).toURI();
            return true;
        } catch (Exception e) {
            return false;
        }
    }
}

