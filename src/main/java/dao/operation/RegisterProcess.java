package dao.operation;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;

public class RegisterProcess {
	
	Connection connection;
	PreparedStatement pstmt;
	ResultSet rs;
	CreateConnection obj;
	
	public int registerProcess(String email, String username, String password, String name) {
		obj = new CreateConnection();
		connection = obj.createConnection();
		int rs = 0;
		String sql = "INSERT INTO users (email, username, password, name) VALUES (?, ?, ?, ?);";
		try {
			pstmt = connection.prepareStatement(sql);
			pstmt.setString(1, email);
			pstmt.setString(2, username);
			pstmt.setString(3, password);
			pstmt.setString(4, name);
			rs = pstmt.executeUpdate();
			return rs;
		}catch(SQLException e) {
			System.out.println("Error in: " + e.getMessage());
			e.printStackTrace();
		}finally {
            if (pstmt != null) try { pstmt.close(); } catch (SQLException ignore) {}
            if (connection != null) try { connection.close(); } catch (SQLException ignore) {}
        }
		return rs;
		
	}
	public ResultSet loginProcess(String username) throws SQLException {
		obj = new CreateConnection();
		connection = obj.createConnection();
		pstmt = null;
		rs = null;
		
		String sql = "SELECT * FROM users WHERE username = ?;";
		try {
			pstmt = connection.prepareStatement(sql);
			pstmt.setString(1, username);
			rs = pstmt.executeQuery();
			return rs;
		}catch(SQLException e) {
			System.out.println("Error in: " + e.getMessage());
			e.printStackTrace();
		}
		return rs;
	}
	public ResultSet getUserDetails(String username) {
		CreateConnection obj = new CreateConnection();
		connection = obj.createConnection();
		pstmt = null;
		rs = null;		
		String sql = "SELECT * FROM users WHERE username = ?;";
		try {
			pstmt = connection.prepareStatement(sql);
			pstmt.setString(1, username);
			rs = pstmt.executeQuery();
			return rs;
		}catch(SQLException e) {
			System.out.println("Error in: " + e.getMessage());
			e.printStackTrace();
		}
		return rs;
	}
	public String getName(String username) throws SQLException {
		obj = new CreateConnection();
		connection = obj.createConnection();
		pstmt = null;
		rs = null;		
		String sql = "SELECT name FROM users WHERE username = ?;";
		try {
			pstmt = connection.prepareStatement(sql);
			pstmt.setString(1, username);
			rs = pstmt.executeQuery();
		}catch(SQLException e) {
			System.out.println("Error in: " + e.getMessage());
			e.printStackTrace();
		}
		if(rs.next()) return rs.getString(1);
		return "Your Profle";
	}
	public int getUserId(String username) throws SQLException {
		obj = new CreateConnection();
		connection = obj.createConnection();
		pstmt = null;
		rs = null;		
		String sql = "SELECT id FROM users WHERE username = ?;";
		try {
			pstmt = connection.prepareStatement(sql);
			pstmt.setString(1, username);
			rs = pstmt.executeQuery();
		}catch(SQLException e) {
			System.out.println("Error in: " + e.getMessage());
			e.printStackTrace();
		}
		if(rs.next()) return rs.getInt(1);
		return -1;
	}
	public boolean checkDetails(String key, String attribute) {
		obj = new CreateConnection();
		connection = obj.createConnection();
		pstmt = null;
		rs = null;		
		String sql = "SELECT name FROM users WHERE " + key + "  = ?;";
		try {
			pstmt = connection.prepareStatement(sql);
			pstmt.setString(1, attribute);
			rs = pstmt.executeQuery();
			if (rs.next()) return true;
		}catch(SQLException e) {
			System.out.println("Error in: " + e.getMessage());
			e.printStackTrace();
		}finally {
			close();
		}
		return false;
	}
	
	
	public void saveLinkDetails(int id, String url, String status) {
		obj = new CreateConnection();
		connection = obj.createConnection();
		String sql = "INSERT INTO links (user_id, url, status, checked_at) VALUES (?, ?, ?, NOW());";
		try {
			pstmt = connection.prepareStatement(sql);
			pstmt.setInt(1, id);
			pstmt.setString(2, url);
			pstmt.setString(3, status);
			pstmt.executeUpdate();
		}catch(SQLException e) {
			System.out.println("Unable to save link details" + e.getMessage());
			e.printStackTrace();
		}finally {
            if (pstmt != null) try { pstmt.close(); } catch (SQLException ignore) {}
            if (connection != null) try { connection.close(); } catch (SQLException ignore) {}
        }
	}
	
	public ResultSet getLinkSearchDetails(int id) {
		obj = new CreateConnection();
		connection = obj.createConnection();
		pstmt = null;
		rs = null;
		String sql = "SELECT url, status, checked_at FROM links WHERE user_id = ? ORDER BY checked_at DESC;";
		try {
			pstmt = connection.prepareStatement(sql);
			pstmt.setInt(1, id);
			rs = pstmt.executeQuery();
			return rs;
		}catch(SQLException e) {
			System.out.println("Unable to save link details" + e.getMessage());
			e.printStackTrace();
		}
		return rs;
	}
	
	
	
	
	
	
	
	
	
	
	public void close() {
		if (rs != null) try { rs.close(); } catch (SQLException ignore) {}
		if (pstmt != null) try { pstmt.close(); } catch (SQLException ignore) {}
		if (connection != null) try { connection.close(); } catch (SQLException ignore) {}
		System.out.println("Successfully close Connection");
	}
	public static void main(String[] args) {
		
	}
	

}
